<?xml version="1.0" encoding="utf-8" ?>
<configuration>
  <configSections>
    <section name="microsoft.visualstudio.testtools" type="Microsoft.VisualStudio.TestTools.UnitTesting.TestConfigurationSection, Microsoft.VisualStudio.QualityTools.UnitTestFramework, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"/>
    <sectionGroup name="applicationSettings" type="System.Configuration.ApplicationSettingsGroup, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" >
      <section name="Inst4WA.Test.Properties.Settings" type="System.Configuration.ClientSettingsSection, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" requirePermission="false" />
    </sectionGroup>
  </configSections>
  <microsoft.visualstudio.testtools>
    <dataSources>
      <add name="XMLConfigsDataSource" connectionString="Inst4WA.Test.Properties.Settings.XMLConfigsDBConnectionString" dataTableName="XMLConfigs"
           dataAccessMethod="Sequential" />
    </dataSources>
  </microsoft.visualstudio.testtools>
  <connectionStrings>
    <add name="Inst4WA.Test.Properties.Settings.XMLConfigsDBConnectionString"
      connectionString="Data Source=|DataDirectory|\XMLConfigs.sdf"
      providerName="System.Data.SqlServerCe.3.5" />
  </connectionStrings>
  <applicationSettings>
    <Inst4WA.Test.Properties.Settings>
      <setting name="XMLConfigsDBFile" serializeAs="String">
        <value>XMLConfigs.sdf</value>
      </setting>
    </Inst4WA.Test.Properties.Settings>
  </applicationSettings>
  <appSettings>
    <!-- These are used while making deployments to Windows Azure. They need to have valid values before starting the tests. -->
    <add key="Subscription" value=""/>
    <add key="DomainName" value=""/>
    
    <!--
        How this works: (Test case generation and execution)
        Test case are generated from 3 csv files: ParamValues.csv, CommandParams.csv, and StepSequences.csv
        ParamValues.csv contains one column for each param and one row for each param set that can be used together in a test case. Cells contain values for that param.
        CommandParams.csv contains command params for each command. Note that a single command may have multiple sets of command params
        StepSequences.csv contains one column for each step and one row for each test case. Also contains one column that specifies the index of the param set to be used with that test case.
        each commandlet has a corresponding directory under TestCases with the pattern: Test-<commandlet name>, which contains the corresponding .csv files for generating test caese for that commandlet
        when you run the test code, depending upon the pattern specified in app.config TestCasesDir, appropriate test case directories are enumerated, the .csv files in them are processed,
        and test cases are generated from them. After all test caeses are generated and added to the database, they are run one after another and a report is generated.

        In addition, the program also allows for hand generated static test cases (i.e. config XML files generated by hand). These can be placed in a directory pointed to by
        StaticTestCasesDir in app.config. These, if present, are processed after the auto-generated test cases.
    -->
    <!--<add key="TestCaseDirs" value="TestCases\Test-CreateApplicationDirectory"/>-->
    <add key="TestCaseDirs" value="TestCases\Test-*"/>
    <add key="StaticTestCaseFiles" value="TestCases\StaticTests-Azure\HelloWorld*.xml"/>
    <!--<add key="StaticTestCaseFiles" value="TestCases\StaticTests-Azure\*.xml"/>-->
    <!--<add key="StaticTestCaseFiles" value="TestCases\StaticTests-Local\*.xml"/>-->
  </appSettings>
</configuration>